#!/usr/bin/env python
# encoding: utf-8
import sys
import os
import fnmatch
import glob
sys.path.insert(0, sys.path[0]+'/../../tools')

VERSION = '0.0.1'
APPNAME = 'magnum_example'

srcdir = '.'
blddir = 'build'

from waflib.Build import BuildContext
from waflib import Logs
import corrade
import magnum
import magnum_plugins


def options(opt):
    opt.load('compiler_cxx waf_unit_test')
    opt.load('compiler_c')
    opt.load('corrade')
    opt.load('magnum')
    opt.load('magnum_plugins')


def configure(conf):
    conf.load('compiler_cxx waf_unit_test')
    conf.load('compiler_c')
    conf.load('corrade')
    conf.load('magnum')
    conf.load('magnum_plugins')

    # we need to find Corrade before Magnum
    conf.check_corrade(components='Utility PluginManager')
    conf.check_magnum(components='MeshTools Primitives Shaders Sdl2Application Audio DebugTools SceneGraph')
    conf.check_magnum_plugins(components='AssimpImporter JpegImporter')

    conf.corrade_enable_pedantic_flags()

    # we want C++11
    if conf.env.CXX_NAME in ["icc", "icpc"]:
        common_flags = "-Wall -std=c++11"
        opt_flags = " -O3 -xHost -mtune=native -unroll -g"
    elif conf.env.CXX_NAME in ["clang"]:
        common_flags = "-Wall -std=c++14"
        opt_flags = " -O3 -march=native -g"
    else:
        if int(conf.env['CC_VERSION'][0]+conf.env['CC_VERSION'][1]) < 47:
            common_flags = "-Wall -std=c++0x"
        else:
            common_flags = "-Wall -std=c++11"
        opt_flags = " -O3 -march=native -g"

    all_flags = common_flags + opt_flags
    conf.env['CXXFLAGS'] = conf.env['CXXFLAGS'] + all_flags.split(' ')
    print(conf.env['CXXFLAGS'])


def build(bld):
    bld.program(features = 'cxx', source='src/triangle.cpp', uselib = 'Magnum_Shaders Magnum_Sdl2Application', target='triangle')

    resource_triangle = corrade.corrade_add_resource(bld, 'TexturedTriangle_RESOURCES', 'res/resources_triangle.conf')
    bld.program(features = 'cxx', source='src/textured_triangle/textured_triangle.cpp src/textured_triangle/textured_triangle_shader.cpp ' + resource_triangle, uselib = 'Magnum_Sdl2Application', target='textured_triangle')

    bld.program(features = 'cxx', source='src/primitives.cpp', uselib = 'Magnum_MeshTools Magnum_Primitives Magnum_Shaders Magnum_Sdl2Application', target='primitives')

    resource_audio = corrade.corrade_add_resource(bld, 'AudioExample_RESOURCES', 'res/resources_audio.conf')
    bld.program(features = 'cxx', source='src/audio.cpp ' + resource_audio, uselib = 'Magnum_Sdl2Application Magnum_Audio Magnum_DebugTools Magnum_SceneGraph', target='audio')

    bld.program(features = 'cxx', source='src/viewer.cpp', uselib = 'Magnum_MeshTools Magnum_SceneGraph Magnum_Shaders Magnum_Sdl2Application', target='viewer')

    importer_dir = bld.path.find_node('res').abspath()
    bld.program(features = 'cxx', source='src/assimp_importer.cpp', uselib = 'MagnumPlugins_AssimpImporter', defines='ASSIMPIMPORTER_RES_DIR="'+importer_dir+'"', target='assimp_importer')

    bld.add_post_fun(corrade.summary)
